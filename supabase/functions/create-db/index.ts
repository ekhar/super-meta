import { createClient } from "npm:@supabase/supabase-js@2.49.4";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface CreateDBRequest {
  name: string;
}

// SQLite file header and schema version table
const SQLITE_HEADER = new Uint8Array([
  0x53, 0x51, 0x4C, 0x69, 0x74, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x20, 0x33, 0x00,
  0x10, 0x00, 0x01, 0x01, 0x00, 0x40, 0x20, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
]);

// Schema version table SQL (simplified binary format)
const SCHEMA_TABLE = new Uint8Array([
  0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x20, 0x54, 0x41, 0x42, 0x4C, 0x45, 0x20, 0x5F, 0x73, 0x63,
  0x68, 0x65, 0x6D, 0x61, 0x5F, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x28, 0x76, 0x65,
  0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x49, 0x4E, 0x54, 0x45, 0x47, 0x45, 0x52, 0x20, 0x50, 0x52,
  0x49, 0x4D, 0x41, 0x52, 0x59, 0x20, 0x4B, 0x45, 0x59, 0x2C, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
  0x65, 0x64, 0x5F, 0x61, 0x74, 0x20, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4D, 0x45, 0x20, 0x44,
  0x45, 0x46, 0x41, 0x55, 0x4C, 0x54, 0x20, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4E, 0x54, 0x5F, 0x54,
  0x49, 0x4D, 0x45, 0x53, 0x54, 0x41, 0x4D, 0x50, 0x29, 0x3B, 0x49, 0x4E, 0x53, 0x45, 0x52, 0x54,
  0x20, 0x49, 0x4E, 0x54, 0x4F, 0x20, 0x5F, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x5F, 0x76, 0x65,
  0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x28, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x29, 0x20,
  0x56, 0x41, 0x4C, 0x55, 0x45, 0x53, 0x20, 0x28, 0x31, 0x29, 0x3B
]);

Deno.serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Only allow POST requests
    if (req.method !== 'POST') {
      throw new Error('Method not allowed');
    }

    // Get request body
    const { name }: CreateDBRequest = await req.json();
    if (!name) {
      throw new Error('Name is required');
    }

    // Get auth user
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    // Create Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: { headers: { Authorization: authHeader } },
      }
    );

    // Get user data
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    if (userError || !user) {
      throw new Error('Error getting user');
    }

    // Create a new SQLite database file in memory
    const dbContent = new Uint8Array([
      ...SQLITE_HEADER,
      ...SCHEMA_TABLE
    ]);

    // Create temporary file path
    const tempDbPath = `/tmp/${user.id}_${name}.db`;
    
    // Write the database file
    await Deno.writeFile(tempDbPath, dbContent);

    // Read the database file back
    const dbFile = await Deno.readFile(tempDbPath);

    // Upload to Supabase Storage
    const storagePath = `${user.id}/${name}.db`;
    const { error: uploadError } = await supabaseClient
      .storage
      .from('sqlite-dbs')
      .upload(storagePath, dbFile, {
        contentType: 'application/x-sqlite3',
        upsert: true
      });

    if (uploadError) {
      throw new Error(`Error uploading database: ${uploadError.message}`);
    }

    // Create database record in metadata table
    const { data: dbRecord, error: dbError } = await supabaseClient
      .from('databases')
      .insert({
        name,
        owner_id: user.id,
        storage_size_bytes: dbFile.length
      })
      .select()
      .single();

    if (dbError) {
      throw new Error(`Error creating database record: ${dbError.message}`);
    }

    // Clean up temporary file
    await Deno.remove(tempDbPath);

    return new Response(
      JSON.stringify(dbRecord),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 201 
      }
    );

  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400
      }
    );
  }
}); 